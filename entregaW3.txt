import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

class Product {

    private String name;
    private double price;
    private int quantitySold;

    public Product(String name, double price, int quantitySold) {
        setName(name);
        setPrice(price);
        setQuantitySold(quantitySold);
    }

    // ? Getters and Setters

    public String getName() {
        return name;
    }

    public void setName(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Name cannot be null or empty");
        }
        this.name = name;
    }

    public double getPrice() {

        return price;
    }

    public void setPrice(double price) {
        if (price <= 0) {
            throw new IllegalArgumentException("Price must be greater than 0");
        }
        this.price = price;
    }

    public int getQuantitySold() {
        return quantitySold;
    }

    public void setQuantitySold(int quantitySold) {
        if (quantitySold < 0) {
            throw new IllegalArgumentException("Quantity sold must be greater than or equal to 0");
        }
        this.quantitySold = quantitySold;
    }

    public double getSubtotal() {
        return price * quantitySold;
    }

    public String toString() {
        return "{\n" +
                "    \"name\": \"" + name + "\",\n" +
                "    \"price\": " + price + ",\n" +
                "    \"quantitySold\": " + quantitySold + "\n" +
                "}";
    }
}

class Sale {
    private static final double TAX_RATE = 0.15;

    public double calculateDiscount(double price) {
        if (price < 100) {
            return 0.05;
        } else if (price > 500) {
            return 0.10;
        } else {
            return 0.00;
        }
    }

    public double calculateTotal(Product product) {
        double subtotal = product.getSubtotal();
        double discount = calculateDiscount(product.getPrice());
        double discountAmount = subtotal * discount;
        double totalAfterDiscount = subtotal - discountAmount;
        double tax = totalAfterDiscount * TAX_RATE;
        return totalAfterDiscount + tax;
    }

    public void printReceipt(Product product) {
        double subtotal = product.getSubtotal();
        double discount = calculateDiscount(product.getPrice());
        double discountAmount = subtotal * discount;
        double total = calculateTotal(product);

        System.out.println("----- SubTotal -----");
        System.out.println(BestSalesSimulator.BLUE + "Product: " + BestSalesSimulator.RESET + product.getName());
        System.out.println(BestSalesSimulator.BLUE + "Price: " + BestSalesSimulator.RESET + "$" + String.format("%.2f", product.getPrice()));
        System.out.println(BestSalesSimulator.BLUE + "Quantity Sold: " + BestSalesSimulator.RESET + product.getQuantitySold());
        System.out.println(BestSalesSimulator.BLUE + "Subtotal: " + BestSalesSimulator.RESET + "$" + String.format("%.2f", subtotal));
        System.out.println(BestSalesSimulator.BLUE + "Discount: " + BestSalesSimulator.RESET + (discount * 100) + "%");
        System.out.println(BestSalesSimulator.BLUE + "Discount Amount: " + BestSalesSimulator.RESET + "$" + String.format("%.2f", discountAmount));
        System.out.println(BestSalesSimulator.BLUE + "Total After Discount: " + BestSalesSimulator.RESET + "$" + String.format("%.2f", subtotal - discountAmount));
        System.out.println(BestSalesSimulator.BLUE + "Tax (15%): " + BestSalesSimulator.RESET + "$" + String.format("%.2f", (subtotal - discountAmount) * TAX_RATE));
        System.out.println(BestSalesSimulator.GREEN + "SubTotal: " + BestSalesSimulator.RESET + "$" + String.format("%.2f", total));
        System.out.println("--------------------");
    }

    public void printAllReceipts(List<Product> products) {
        if (products.isEmpty()) {
            System.out.println(BestSalesSimulator.RED + "No hay productos para imprimir factura." + BestSalesSimulator.RESET);
            return;
        }

        double grandTotal = 0;

        for (Product product : products) {
            printReceipt(product);
            grandTotal += calculateTotal(product);
        }

        System.out.println("--------- TOTAL ---------");
        System.out.println(BestSalesSimulator.GREEN + "Total: " + BestSalesSimulator.RESET + "$" + String.format("%.2f", grandTotal));
        System.out.println("-------------------------");
    }
}

public class BestSalesSimulator {

    // ? ANSI codes for colors
    public static final String BLUE = "\033[0;34m";
    public static final String YELLOW = "\033[0;33m";
    public static final String RESET = "\033[0m";
    public static final String RED = "\033[0;31m";
    public static final String GREEN = "\033[0;32m";
    public static final String CYAN = "\033[0;36m";

    public static List<Product> products = new ArrayList<>();
    public static Sale sale = new Sale();

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        boolean keepRunning = true;

        while (keepRunning) {
            clearConsole();
            System.out.println(CYAN + "             ------------------------------");
            System.out.println("            | EL MEJOR SIMULADOR DE VENTAS |");
            System.out.println("             ------------------------------" + RESET + "\n");
            System.out.println(YELLOW + "1. " + RESET + "Ingresar un producto");
            System.out.println(YELLOW + "2. " + RESET + "Ver productos ingresados");
            System.out.println(YELLOW + "3. " + RESET + "Modificar un producto");
            System.out.println(YELLOW + "4. " + RESET + "Eliminar un producto");
            System.out.println(YELLOW + "5. " + RESET + "Imprimir factura");
            System.out.println(YELLOW + "6. " + RESET + "Salir" + "\n");
            System.out.print(GREEN + "¿Qué desea realizar?" + RESET + "\n\n");

            int option = getValidOption(scanner, 1, 6);

            scanner.nextLine();

            switch (option) {
                case 1:
                    addProduct(scanner);
                    break;
                case 2:
                    showProducts(products);
                    break;
                case 3:
                    modifyProduct(scanner, products);
                    break;
                case 4:
                    deleteProduct(scanner, products);
                    break;
                case 5:
                    sale.printAllReceipts(products);
                    break;
                case 6:
                    System.out.println(GREEN + "¡Gracias por usar el mejor simulador de ventas!" + RESET);
                    return;
                default:
                    System.out.println(RED + "Opción inválida, por favor intente de nuevo." + RESET);
            }

            if (keepRunning) {
                keepRunning = askToContinue(scanner);
            }
        }
    }

    public static void addProduct(Scanner scanner) {
        String name = getValidStringInput(scanner, "Ingrese el nombre del producto: ");
        double price = getValidDoubleInput(scanner, "Ingrese el precio del producto: ");
        int quantitySold = getValidIntInput(scanner, "Ingrese la cantidad vendida del producto: ");

        try {
            Product newProduct = new Product(name, price, quantitySold);
            products.add(newProduct);
            System.out.println(GREEN + "Producto agregado exitosamente." + RESET);
        } catch (IllegalArgumentException e) {
            System.out.println(RED + "Error al agregar el producto: " + e.getMessage() + RESET);
        }
    }

    public static void showProducts(List<Product> products) {
        if (products.isEmpty()) {
            System.out.println(YELLOW + "No hay productos ingresados." + RESET);
        } else {
            System.out.println(CYAN + "----- Productos Ingresados -----" + RESET);
            for (Product product : products) {
                System.out.println(product);
                System.out.println();
            }
            System.out.println(CYAN + "-------------------------------" + RESET);
        }
    }

    public static void modifyProduct(Scanner scanner, List<Product> products) {
        if (products.isEmpty()) {
            System.out.println(YELLOW + "No hay productos ingresados para modificar." + RESET);
            return;
        }
    
        System.out.println(CYAN + "----- Modificar Producto -----" + RESET);
        for (int i = 0; i < products.size(); i++) {
            System.out.println((i + 1) + ". " + products.get(i));
        }
        
        int productIndex = getValidIntInput(scanner, "Ingrese el número del producto a modificar: ");
        if (productIndex < 1 || productIndex > products.size()) {
            System.out.println(RED + "Número de producto inválido. Inténtelo de nuevo." + RESET);
            return;
        }
    
        Product productToModify = products.get(productIndex - 1);
    
        System.out.println(GREEN + "Modificando producto: " + productToModify + RESET);
    
        String newName = getValidStringInput(scanner, "Ingrese el nuevo nombre del producto: ");
        if (!newName.isEmpty()) {
            productToModify.setName(newName);
        }
    
        double newPrice = getValidDoubleInput(scanner, "Ingrese el nuevo precio del producto: ");
        if (newPrice > 0) {
            productToModify.setPrice(newPrice);
        }
    
        int newQuantitySold = getValidIntInput(scanner, "Ingrese la nueva cantidad vendida del producto: ");
        if (newQuantitySold >= 0) {
            productToModify.setQuantitySold(newQuantitySold);
        }
    
        System.out.println(GREEN + "Producto modificado exitosamente." + RESET);
    }

    public static void deleteProduct(Scanner scanner, List<Product> products) {
        if (products.isEmpty()) {
            System.out.println(RED + "No hay productos para eliminar." + RESET);
            return;
        }
    
        System.out.println("Seleccione el número del producto que desea eliminar:");
        for (int i = 0; i < products.size(); i++) {
            Product product = products.get(i);
            System.out.println((i + 1) + ". " + product);
        }
    
        int index = 0;
        boolean validSelection = false;
        while (!validSelection) {
            System.out.print("Ingrese el número del producto: ");
            String input = scanner.nextLine();
    
            if (input.isEmpty()) {
                System.out.println(RED + "La entrada no puede estar vacía. Inténtelo de nuevo." + RESET);
                continue;
            }
    
            try {
                index = Integer.parseInt(input) - 1;
                if (index < 0 || index >= products.size()) {
                    System.out.println(RED + "Selección inválida. Por favor, ingrese un número válido." + RESET);
                } else {
                    validSelection = true;
                }
            } catch (NumberFormatException e) {
                System.out.println(RED + "Entrada inválida. Por favor, ingrese un número válido." + RESET);
            }
        }
    
        products.remove(index);
        System.out.println(GREEN + "Producto eliminado exitosamente." + RESET);
    }
    

    public static String getValidStringInput(Scanner scanner, String prompt) {
        System.out.print(prompt);
        String input = scanner.nextLine();
        while (input == null || input.trim().isEmpty()) {
            System.out.print(RED + "Entrada inválida. " + RESET + prompt);
            input = scanner.nextLine();
        }
        return input;
    }

    public static double getValidDoubleInput(Scanner scanner, String prompt) {
        double value = 0;
        boolean valid = false;
        while (!valid) {
            System.out.print(prompt);
            String input = scanner.nextLine();

            try {
                if (input.isEmpty()) {
                    System.out.println(RED + "La entrada no puede estar vacía. Inténtelo de nuevo." + RESET);
                    continue;
                }

                value = Double.parseDouble(input);

                if (value <= 0) {
                    System.out.println(RED + "El valor debe ser mayor que 0. Inténtelo de nuevo." + RESET);
                } else {
                    valid = true;
                }
            } catch (NumberFormatException e) {
                System.out.println(RED + "Entrada inválida. Ingrese un número válido." + RESET);
            }
        }
        return value;
    }

    public static int getValidIntInput(Scanner scanner, String prompt) {
        int value = 0;
        boolean valid = false;
        while (!valid) {
            System.out.print(prompt);
            String input = scanner.nextLine();

            try {
                if (input.isEmpty()) {
                    System.out.println(RED + "La entrada no puede estar vacía. Inténtelo de nuevo." + RESET);
                    continue;
                }

                value = Integer.parseInt(input);

                if (value <= 0) {
                    System.out.println(RED + "El valor debe ser mayor que 0 y entero. Inténtelo de nuevo." + RESET);
                } else {
                    valid = true;
                }
            } catch (NumberFormatException e) {
                System.out.println(RED + "Entrada inválida. Ingrese un número entero válido." + RESET);
            }
        }
        return value;
    }

    public static void clearConsole() {
        System.out.print("\033[H\033[2J");
        System.out.flush();
    }

    public static int getValidOption(Scanner scanner, int min, int max) {
        int option = 0;
        boolean valid = false;
        while (!valid) {
            System.out.print("Ingrese una opción: ");
            
            try {
                option = scanner.nextInt();
                if (option < min || option > max) {
                    System.out.println(
                            RED + "Opción inválida. Por favor, ingrese un número entre " + min + " y " + max + RESET);
                } else {
                    valid = true;
                }
            } catch (InputMismatchException e) {
                System.out.println(RED + "Entrada inválida. Por favor, ingrese un número válido." + RESET);
                scanner.next();
            }
        }
        return option;
    }

    public static boolean askToContinue(Scanner scanner) {
        String response = "";
        boolean validInput = false;
    
        while (!validInput) {
            System.out.print(YELLOW + "¿Desea realizar otra acción? (s/n): " + RESET);
            response = scanner.next().trim().toLowerCase();
    
            if (response.equals("s") || response.equals("n")) {
                validInput = true;
            } else {
                System.out.println(RED + "Entrada inválida. Por favor, ingrese 's' para sí o 'n' para no." + RESET);
            }
        }
    
        return response.equals("s");
    }

}
